<div class="timebox">
  <div class="day_time"></div>
  <div class="minutes_day"></div>
  <div class="second_time"></div>
  <div class="millisecond_time"></div>


</div>

<div class="contatin">
  
  <div class="left">
    <div class="felx_box">
      <h1>Daily Deal Of The Day</h1>
      <div class="clock"></div>
      <div class="clock"></div>
      <div class="clock"></div>
      <div class="clock"></div>
    </div>
    
    <div>
    
      <p>Best gift for us</p>
      <p>Sweety Sweety Sweety Sweety Sweety</p>
      <a class=""t1><button>shop now</button></a>
      <a class="t2"><button>Detail</button></a>

    
    </div>
  
  </div>
  <div class="right">
    <div style="transform:skew(-20deg); overflow:hidden;">
      <img style="transform:skew(20deg);" src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fa.300.cn%2Fanliku%2F180906%2F0008901603.jpg&refer=http%3A%2F%2Fa.300.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1637139827&t=a05c95f5466dbcfce1504784d73e4336">
    </div>
  </div>


</div>





{% schema %}
  {
    "name": "daily-deal-of-the-day",
	"tag":"section",
    "settings": [],
	"presets":[
	{
	"name":"daily-deal-of-the-day"
	}
]
  }
{% endschema %}

{% stylesheet %}
{% endstylesheet %}




{% javascript %}
{% endjavascript %}


<style>
  
 
    .timebox{
            width: 100px;
            height: 150px;
            background-color: black;
            color: white;
            font-size: 30px;
            text-align: center;
            float: left;
            margin: 10px 5px;
            line-height: 150px;
        }
  .contatin{
  background-color: #dfdfdf;
  display:flex;
  align-items: center;
  }
  .left,.right{
  flex:1;
  }
  
  .left,.clock1{
  
  text-align:center;
  }
  
  .felx_box{
  
  display:flex;
  }
  
  .clock {
  border: 4px solid #00cc9d;
  border-radius: 50%;
  height: 100px;
  width: 100px;
  margin: 0px auto;
  display:inline-block !important;
}

.clock::before {
  content: " ";
  background-color: #fd43bb;
  display: block;
  width: 3px;
  height: 40px;
  margin: 50%;
  -webkit-animation: tick 36s linear infinite;
  -moz-animation: tick 36s linear infinite;
  animation: tick 36s linear infinite;
  -webkit-transform-origin: center top;
  -moz-transform-origin: center top;
  transform-origin: center top;
}

.clock::after {
  content: " ";
  background-color: #0088cc;
  display: block;
  width: 3px;
  height: 25px;
  margin: -93% 0 0 50%;
  -webkit-animation: tick 864s linear infinite;
  -moz-animation: tick 864s linear infinite;
  animation: tick 864s linear infinite;
  -webkit-transform-origin: center top;
  -moz-transform-origin: center top;
  transform-origin: center top;
}

@-moz-keyframes tick {
  100% {
    -webkit-transform: rotate(360deg);
    -moz-transform: rotate(360deg);
    -ms-transform: rotate(360deg);
    -o-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}

@-webkit-keyframes tick {
  100% {
    -webkit-transform: rotate(360deg);
    -moz-transform: rotate(360deg);
    -ms-transform: rotate(360deg);
    -o-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
  
</style>


{{ 'time-count-time.js' | asset_url | script_tag }}
<script>

	
  
	var set_time_box = document.getElementsByClassName('timebox')[0];
  	var set_time_day = set_time_box.getElementsByClassName('day_time')[0];
    var set_time_minutes = set_time_box.getElementsByClassName('minutes_time')[0];
    var set_time_second = set_time_box.getElementsByClassName('second_time')[0];
  	var set_time_millisecond = set_time_box.getElementsByClassName('millisecond_time')[0];
  
  	var end_time = new Date("2022-10-19 22:00"); 	
  
 var count_time = function time(){
  
  	var now_time = new Date(); 
    var count_time = parseInt((end_time.getTime - now_time.getTime)/1000);
    
    if( count_time<=0){
      
      set_time_day.innerHTML = "秒";
      set_time_minutes.innerHTML = "杀";
      set_time_second.innerHTML = "结";
      set_time_millisecond.innerHTML = "束";
      
    }else {
     	
      set_time_day.innerHTML = (count_time/(3600*24));
      set_time_minutes.innerHTML = (count_time/3600%24);
      set_time_second.innerHTML = (count_time/60%60);
      set_time_millisecond.innerHTML = (count_time%60);
      
    }
    
    
  
  };
        
        
        
  
  
  setINterval(count(),1000);
  
</script>




<script>

window.addEventListener("DOMContentLoaded",() => {
	const clock = new BouncyEmbossedClock(".clock1");
});

class BouncyEmbossedClock {
	constructor(el) {
		this.el = document.querySelector(el);
		this.els = this.el ? this.el.querySelectorAll(".clock__digit") : [];
		this.digits = [];
		this.to = null;
		this.dto = [
			[null,null,null],
			[null,null,null],
			[null,null],
			[null,null,null],
			[null,null,null],
			[null,null],
			[null,null,null],
			[null,null,null],
		];
		this.staticUpdate();
		this.update();
	}
	getTime() {
		const time = new Date();
		const hms = [
			time.getHours(),
			time.getMinutes(),
			time.getSeconds()
		];

		return hms.map(u => u < 10 ? `0${u}` : `${u}`).join(":").split("");	
	}
	staticUpdate() {
		if (this.els) {
			this.digits = this.getTime();
			this.digits.forEach((d,i) => {
				this.els[i].textContent = d;
			});
		}
	}
	update() {
		if (this.els) {
			// get the time
			const display = this.getTime();
			const bounce = "clock__digit--bounce";
			const baseDelay = 350;
			const delayDec = 50;

			// display the digits
			display.forEach((d,i) => {
				if (+d > +this.digits[i] || +d === 0 && +this.digits[i] !== 0) {
					const colonElCL = display[i + 1] === ":" ? this.els[i + 1].classList : null;
					const el = this.els[i];
					const timeout = baseDelay - delayDec * i;

					this.dto[i].forEach(t => {
						clearTimeout(t);
					});

					// run the animation
					this.dto[i][0] = setTimeout(() => {
						el.classList.add(bounce);
					}, timeout);

					// show the next digit
					this.dto[i][1] = setTimeout(() => {
						el.textContent = d;
					}, timeout + 167);

					// kill the animation
					this.dto[i][2] = setTimeout(() => {
						el.classList.remove(bounce);
					}, timeout + 500);

					// colon animation (if applicable)
					if (colonElCL) {
						this.dto[i + 1].forEach(t => {
							clearTimeout(t);
						});

						this.dto[i + 1][0] = setTimeout(() => {
							 colonElCL.add(bounce);
						}, timeout - delayDec);

						this.dto[i + 1][1] = setTimeout(() => {
							 colonElCL.remove(bounce);
						}, (timeout - delayDec) + 500);
					}
				}

				this.digits[i] = d;
			});

			// loop
			clearTimeout(this.to);
			this.to = setTimeout(this.update.bind(this),1e3);
		}
	}
}

</script>


